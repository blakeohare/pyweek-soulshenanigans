
class InputModel {
	static field INSTANCE = new InputModel();
	field keys = {
		'up' : false,
		'down' : false,
		'left' : false,
		'right' : false,
		'A' : false,
		'B' : false,
		'X' : false,
		'Y' : false,
		'start' : false,
		'L' : false,
		'R' : false,
	};
	
	constructor () {
		this.keyboard = new KeyboardInputSource();
		this.joysticks = [];
		this.active_joystick = null;
		
		// TODO: set automated input to overtake KeyboardInputSource for automated gameplay cutscenes
	}
	
	function add_joystick(joystick) {
		// this.joysticks.append(new JoystickInputSource(joystick));
	}
	
	function set_active_joystick(joystick) {
		this.active_joystick = joystick;
	}
	
	function get_input_sources() {
		return [this.keyboard] + this.joysticks;
	}
	
	function get_joysticks() {
		return this.joysticks;
	}
	
	function get_active_input_sources() {
		if (this.active_joystick == null) {
			return [this.keyboard];
		}
		return [this.keyboard, this.active_joystick];
	}
	
	function get_active_joystick() {
		return this.active_joystick;
	}
	
	function get_input(self, pygame_events) {
		inputevents = [];
		for (source : this.get_active_input_sources()) {
			inputevents += source.process_events(pygame_events);
			for (event : inputevents) {
				this.keys[event.key] = event.down;
			}
		}
		
		return inputevents;
	}
	
	function is_key_pressed(key) {
		return this.keys[key];
	}
}
