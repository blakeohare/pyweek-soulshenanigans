import Math;

class Platform {
	field type;
	field left;
	field y_left;
	field width;
	field height;
	field y_right;
	field jumpthrough;
	
	constructor (type, left, y_left, width, y_right, height, jumpthrough) {
		this.type = type; // jumpthrough, blocking, solid, incline
		this.left = left;
		this.y_left = y_left;
		this.width = width;
		this.height = height; // only used for solid type
		this.y_right = y_right;
		this.jumpthrough = jumpthrough;
	}
	
	function duplicate(x_offset, y_offset) {
		return new Platform(this.type,
			this.left + x_offset,
			this.y_left + y_offset,
			this.width,
			this.y_right + y_offset,
			this.height,
			this.jumpthrough);
	}
	
	// won't work for inclines
	function duplicate_right(x_offset, y_offset) {
		return new Platform(this.type,
			this.left + x_offset + 8,
			this.y_left + y_offset,
			this.width / 2,
			this.y_right + y_offset,
			this.height,
			this.jumpthrough);
	}
	
	// won't work for inclines
	function duplicate_left(x_offset, y_offset) {
		return Platform(this.type,
			this.left + x_offset,
			this.y_left + y_offset,
			this.width / 2,
			this.y_right + y_offset,
			this.height,
			this.jumpthrough);
	}
			
	function get_y_at_x(x) {
		if (this.type == 'incline') {
			percentage = (x - this.left + 0.0) / this.width;
			return int(this.y_right * percentage + this.y_left * (1 - percentage));
		}
		return this.y_left;
	}
	
	function get_x_at_y(y) {
		// this method is for INCLINES only
		// y MUST be in the range of this incline
		percentage = (y - this.y_left + 0.0) / (this.y_right - this.y_left);
		return floor(this.left + percentage * this.width);
	}
	
	function is_x_in_range(x) {
		return this.left <= x and this.left + this.width >= x
	
	function get_left_wall_x() {
		return this.left;
	}
	
	function get_right_wall_x() {
		return this.left + this.width;
	}
	
	function get_top() { // assumes non incline type
		return this.y_left ;
	}
	
	function get_bottom() {
		if (this.type == 'solid')
			return this.y_left + this.height;
		return this.y_left; // inclines aren't "bottomed"
	}
	
	// this function will not be called when x is in the platform
	function get_closest_terminating_y(x) {
		if (x < this.left) return this.y_left;
		return this.y_right;
	}
}
