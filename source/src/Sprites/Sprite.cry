import Math;

class Sprite {
	field x;
	field y;
	
	field vx = 0;
	field vy = 0;
	
	field dx = 0;
	field dy = 0;
	
	field width = 1;
	field height = 1;
	
	field lifetime = 0;
	
	field on_ground = false;
	field platform = null;
	field left_facing = false;
	field moves_through_walls = false;
	
	field immune_to_gravity = false;
	field invincible = false;
	field confined_to_scene = false;
	field killed = false;
	field walked_into_wall = false;
	field is_soul_jar = false;
	field is_powerup = false;
	field expired = false;
	field hp = 1;
	
	constructor(x, y) {
		this.x = x; // these points are the CENTER of the player
		this.y = y;
	}
	
	function get_collision_radius() {
		return (this.width + this.height) / 2.0;
	}
	
	function get_top_left() {
		return [this.get_left(), this.get_top()];
	}
	
	function get_left() {
		return floor(this.x - this.width / 2);
	}
	
	function get_top() {
		return floor(this.y - this.height / 2);
	}
	
	function get_head_bonk_top() {
		return floor(this.y - this.height / 2) + 5;
	}
	
	function get_bottom() {
		return this.get_top_left()[1] + this.height;
	}
	
	function get_left() {
		return floor(this.x - this.width / 2);
	}
	
	function get_right() {
		return this.get_left() + this.width;
	}

	function update(playScene) { } // override me!

	function hit(additional_damage) {
		damage = wandStatus.SelectedWand() + 1 + additional_damage;
		this.hp -= damage;
		return this.hp <= 0;
	}
	
	function is_collision_with_rect(left, right, top, bottom) {
		tolerance = 2;
		if (this.get_left() + tolerance > right) return false;
		if (this.get_right() - tolerance < left) return false;
		if (this.get_top() + tolerance > bottom) return false;
		if (this.get_bottom() - tolerance < top) return false;
		return true;
	}
	
	function GetPowerUp(counter, playScene) {
		c = floor(counter % 100);
		if (c <= 2) 
			return new Powerup(this.x, this.y, 'big_recharge');
		// else if (c <= 4)
		// 	return new Powerup(this.x, this.y, 'invincibility');
		else if (c <= 50)
			return new Powerup(this.x, this.y, 'little_recharge');
		
		return null;
	}
	
	function platform_below_vx_location(playScene) {
		x = this.x + (2 * this.vx);
		
		if (this.platform != null) {
			if (this.platform.is_x_in_range(x)) {
				return true;
			} else if (this.platform.left > x) {
				left = playScene.get_left_stiched_platform(this.platform)
				if (left != null) { //TODO: will not handle things walking faster than 16 pixels/frame
					return left.is_x_in_range(x);
				}
			} else {
				right = playScene.get_right_stiched_platform(this.platform)
				if (right != null) {
					return right.is_x_in_range(x);
				}
			}
		}
		return false;
	}
		
	function wall_at_vx_location(playScene) {
		return this.walked_into_wall;
	}
	
	function is_going_to_vx_bad(playScene) {
		return 
			(this.platform != null && 
				!this.platform_below_vx_location(playScene)) || 
			this.wall_at_vx_location(playScene);
	}
}
